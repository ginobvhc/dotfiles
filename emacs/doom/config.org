#+TITLE: FT's Doom Emacs Config
#+AUTHOR: FT
#+DESCRIPTION: FT's personal Doom Emacs config.
#+STARTUP: showeverything


* TOC :toc:
- [[#doom-intro][DOOM intro]]
- [[#look-and-feel][LOOK AND FEEL]]
  - [[#relative-numbers][Relative Numbers]]
  - [[#doom-theme][Doom theme]]
  - [[#registers][REGISTERS]]
  - [[#scape-secuence][Scape secuence]]
- [[#ath10k-para-redmibook][ATH10k para redmibook]]
- [[#shortcuts][SHORTCUTS]]
  - [[#bookmarks-and-buffers][BOOKMARKS AND BUFFERS]]
  - [[#centaur-tabs][CENTAUR-TABS]]
  - [[#dired][DIRED]]
- [[#personal-data][Personal data]]
- [[#org][ORG]]
- [[#shells][shells]]
- [[#default-app][Default APP]]
  - [[#browser][Browser]]
- [[#mail-n-feed][Mail N' Feed]]
  - [[#mu4e][Mu4e]]
  - [[#rss][RSS]]
- [[#autocomplete][Autocomplete]]
- [[#lsp][lsp]]
- [[#projectile][Projectile]]
- [[#patches][Patches]]

* DOOM intro
Here are some additional functions/macros that could help you configure Doom:

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.



* LOOK AND FEEL
** Relative Numbers
#+Begin_src Emacs-Lisp

;; This Determines The Style Of Line Numbers In Effect. If Set To `Nil', Line
;; Numbers Are Disabled. For Relative Line Numbers, Set This To `Relative'.
(setq display-line-numbers-type 'relative)
#+End_src
** Doom theme
#+begin_src emacs-lisp

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-dracula)
#+end_src

** REGISTERS
Emacs registers are compartments where you can save text, rectangles and positions for later use. Once you save text or a rectangle in a register, you can copy it into the buffer once or many times; once you save a position in a register, you can jump back to that position once or many times.  The default GNU Emacs keybindings for these commands (with the exception of counsel-register) involves 'C-x r' followed by one or more other keys.  I wanted to make this a little more user friendly, and since I am using Doom Emacs, I choose to replace the 'C-x r' part of the key chords with 'SPC r'.

| COMMAND                          | DESCRIPTION                      | KEYBINDING |
|----------------------------------+----------------------------------+------------|
| copy-to-register                 | /Copy to register/                 | SPC r c    |
| frameset-to-register             | /Frameset to register/             | SPC r f    |
| insert-register                  | /Insert contents of register/      | SPC r i    |
| jump-to-register                 | /Jump to register/                 | SPC r j    |
| list-registers                   | /List registers/                   | SPC r l    |
| number-to-register               | /Number to register/               | SPC r n    |
| counsel-register                 | /Interactively choose a register/  | SPC r r    |
| view-register                    | /View a register/                  | SPC r v    |
| window-configuration-to-register | /Window configuration to register/ | SPC r w    |
| increment-register               | /Increment register/               | SPC r +    |
| point-to-register                | /Point to register/                | SPC r SPC  |

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Copy to register"
      "r c" #'copy-to-register
      :leader
      :desc "Frameset to register"
      "r f" #'frameset-to-register
      :leader
      :desc "Insert contents of register"
      "r i" #'insert-register
      :leader
      :desc "Jump to register"
      "r j" #'jump-to-register
      :leader
      :desc "List registers"
      "r l" #'list-registers
      :leader
      :desc "Number to register"
      "r n" #'number-to-register
      :leader
      :desc "Interactively choose a register"
      "r r" #'counsel-register
      :leader
      :desc "View a register"
      "r v" #'view-register
      :leader
      :desc "Window configuration to register"
      "r w" #'window-configuration-to-register
      :leader
      :desc "Increment register"
      "r +" #'increment-register
      :leader
      :desc "Point to register"
      "r SPC" #'point-to-register)
#+END_SRC
** Scape secuence
#+begin_src emacs-lisp
(setq-default evil-escape-key-sequence "df")

#+end_src

* ATH10k para redmibook

Please se the following guide

[[https://github.com/dmhacker/arch-linux-surface/issues/62][Link]]


I played around with some of the alternative firmwares floating around on my Surface Go. Here's a brief info dump in case it's useful for someone.
Symptoms

With the default firmware provided by linux-firmware, kernel logs (in e.g. dmesg or journalctl -b -k) will show:

ath10k_pci 0000:01:00.0: failed to fetch board data for bus=pci,vendor=168c,device=003e,subsystem-vendor=168c,subsystem-device=3370 from ath10k/QCA6174/hw3.0/board-2.bin
ath10k_pci 0000:01:00.0: board_file api 1 bmi_id N/A crc32 ed5f849a
ath10k_pci 0000:01:00.0: htt version request timed out
ath10k_pci 0000:01:00.0: failed to setup htt: -110
ath10k_pci 0000:01:00.0: could not init core (-110)
ath10k_pci 0000:01:00.0: could not probe fw (-110)

In this case, you will not see a network interface at all, so e.g. ip link will show only lo as being present.

Or with some different, still incorrect, firmware:

ath10k_pci 0000:01:00.0: failed to fetch board data for bus=pci,vendor=168c,device=003e,subsystem-vendor=168c,subsystem-device=3370 from ath10k/QCA6174/hw3.0/board-2.bin
ath10k_pci 0000:01:00.0: board_file api 1 bmi_id N/A crc32 ed5f849a
ath10k_pci 0000:01:00.0: unsupported HTC service id: 1536
ath10k_pci 0000:01:00.0: failed to ping firmware: -110
ath10k_pci 0000:01:00.0: failed to reset rx filter: -110
ath10k_pci 0000:01:00.0: could not init core (-110)
ath10k_pci 0000:01:00.0: could not probe fw (-110)

In this case, you will see a network interface, but it will be persistently down and trying to ip link set wlp4s0 up will lead to the error RTNETLINK answers: Connection timed out and more "failed to ping firmware" etc. in the kernel log.

There are probably other failure states depending on just which combination of firmware files you try. The above are just a few examples of messages you might see.

With the working firmware you should instead see this:

ath10k_pci 0000:01:00.0: qca6174 hw3.2 target 0x05030000 chip_id 0x00340aff sub 168c:3370
ath10k_pci 0000:01:00.0: kconfig debug 1 debugfs 1 tracing 1 dfs 0 testmode 0
ath10k_pci 0000:01:00.0: firmware ver RM.4.4.1.c2-00057-QCARMSWP-1 api 6 features wowlan,ignore-otp,no-4addr-pad,raw-mode crc32 e061250a
ath10k_pci 0000:01:00.0: found invalid board magic
ath10k_pci 0000:01:00.0: board_file api 1 bmi_id N/A crc32 c8f42334
ath10k_pci 0000:01:00.0: htt-ver 3.56 wmi-op 4 htt-op 3 cal otp max-sta 32 raw 0 hwcrypto 1

And have a working network interface. (Despite the "invalid board magic" complaint.)
Firmware alternatives

The firmware files are in /usr/lib/firmware/ath10k/QCA6174/hw3.0/. Both board.bin and board-2.bin need to be changed. firmware-4.bin and firmware-6.bin are fine as they are and don't affect behaviour in any noticeable way.

The firmware provided by linux-firmware doesn't work. (It seems like board-2.bin is loaded first and is more important, so I'll use it as a reference file.)

    fails: linux-firmware-20190717.bf13a71-1 whose board-2.bin has file size 567608 and SHA256 19b7e0849d8beec4144efcf694f0a5752a97ba48931f8155ca23eb4cca0bcf4f
    fails: linux-firmware-20200316.8eb0b28-1 whose board-2.bin has file size 584036 and SHA256 2ca3db3303e30ea8a4c2fc0decb865b3600ea622d75d177df65b891873f23b3e

The firmware provided in https://github.com/jakeday/linux-surface does work, both the older and the newer version:

    works: https://github.com/jakeday/linux-surface/blob/a25ec543b6c93d2cff5517f59fec445f959773a0/firmware/ath10k_firmware.zip whose board-2.bin has file size 8124 and SHA256 e79b80e2243c62f41fbaf1cc92845cefb11019b0a6d1c91488cf43fd63dcf85c
    works: https://github.com/jakeday/linux-surface/blob/a77e9504b1ecac9201a1d9dca064111335a19fa8/firmware/ath10k_firmware.zip whose board-2.bin has file size 8124 and SHA256 a6792268ebfd779405f73a81d14667593b6cb1c4287937b72547361a146a145e

The aforementioned (older) one is the same the one you can get from https://support.killernetworking.com/K1535_Debian/board.bin. I didn't need to set the skip_otp option like they suggest, it works fine for me with the default options. It also works whether you remove board-2.bin (as in Killer's instructions) or make it a duplicate of board.bin (as in https://github.com/jakeday/linux-surface).

I noticed that in the working setup, board.bin has the exact same byte size as the board.bin provided by linux-firmware. So I tried also using that, either replacing both files with it or keeping it as board.bin and removing board-2.bin. But that did not work either. So here's another failing one:

    fails: Using only board.bin as provided in linux-firmware, file size 8124, SHA256 1a8d225818b46986fc4f615594fbe448fa820618590d6902c8f844bb37cda667

I don't know where all of these alternative firmwares are from, or whether they are useful for some other device with the Qualcomm Atheros QCA6174. All I can say is that only the ones provided by jakeday / Killer work on the Surface Go.
My recommendation

Since jakeday provides seemingly the newest firmware, I suggest going with that. So grab https://github.com/jakeday/linux-surface/blob/a77e9504b1ecac9201a1d9dca064111335a19fa8/firmware/ath10k_firmware.zip and overwrite both board.bin and board-2.bin in /usr/lib/firmware/ath10k/QCA6174/hw3.0/ with the corresponding binaries in the zip file. This setup works just fine on my Surface Go.

* SHORTCUTS
** BOOKMARKS AND BUFFERS
Doom Emacs uses 'SPC b' for keybindings related to bookmarks and buffers.  Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.  Regarding /buffers/, the text you are editing in Emacs resides in an object called a /buffer/. Each time you visit a file, a buffer is used to hold the file’s text. Each time you invoke Dired, a buffer is used to hold the directory listing.

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "List bookmarks"
      "b L" #'list-bookmarks
      :leader
      :desc "Save current bookmarks to bookmark file"
      "b w" #'bookmark-save)
#+END_SRC

** CENTAUR-TABS
To use tabs in Doom Emacs, be sure to uncomment "tabs" in Doom's init.el.  Displays tabs at the top of the window similar to tabbed web browsers such as Firefox.  I don't actually use tabs in Emacs.  I placed this in my config to help others who may want tabs.  In the default configuration of Doom Emacs, 'SPC t' is used for "toggle" keybindings, so I choose 'SPC t c' to toggle centaur-tabs.  The "g" prefix for keybindings is used for a bunch of evil keybindings in Doom, but "g" plus the arrow keys were not used, so I thought I would bind those for tab navigation.  But I did leave the default "g t" and "g T" intact if you prefer to use those for centaur-tabs-forward/backward.

| COMMAND                     | DESCRIPTION          | KEYBINDING       |
|-----------------------------+----------------------+------------------|
| centaur-tabs-local-mode     | /Toggle tabs on/off/   | SPC t c          |
| centaur-tabs-forward        | /Next tab/             | g <right> or g t |
| centaur-tabs-backward       | /Previous tab/         | g <left> or g T  |
| centaur-tabs-forward-group  | /Next tab group/       | g <down>         |
| centaur-tabs-backward-group | /Previous tab group/   | g <up>           |

#+BEGIN_SRC emacs-lisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tabs on/off"
      "t c" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+END_SRC

** DIRED
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

| COMMAND                                   | DESCRIPTION                                     | KEYBINDING |
|-------------------------------------------+-------------------------------------------------+------------|
| dired                                     | /Open dired file manager/                         | SPC d d    |
| dired-jump                                | /Jump to current directory in dired/              | SPC d j    |
| (in dired) peep-dired                     | /Toggle image previews within dired/              | SPC d p    |
| (in dired) dired-view-file                | /View file in dired/                              | SPC d v    |
| (in dired) dired-up-directory             | /Go up in the directory tree/                     | h          |
| (in dired) dired-find-file                | /Go down in the directory tree (or open if file)/ | l          |
| (in peep-dired-mode) peep-dired-next-file | /Move to next file in peep-dired-mode/            | j          |
| (in peep-dired-mode) peep-dired-prev-file | /Move to previous file in peep-dired-mode/        | k          |

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Dired"
      "d d" #'dired
      :leader
      :desc "Dired jump to current"
      "d j" #'dired-jump
      (:after dired
        (:map dired-mode-map
         :leader
         :desc "Peep-dired image previews"
         "d p" #'peep-dired
         :leader
         :desc "Dired view file"
         "d v" #'dired-view-file)))
;; Make 'h' and 'l' go back and forward in dired. Much faster to navigate the directory structure!
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
;; If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+END_SRC

* Personal data
#+begin_src emacs-lisp

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "FT")
#+end_src
* ORG
#+begin_src emacs-lisp

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "/home/ginobvhc/Sync/Org/")
;;(setq initial-buffer-choice "~/Org/todo.org")
#+end_src
#+begin_src emacs-lisp

(setq projectile-project-search-path '("/home/ginobvhc/programacion/01-projects/" "/home/ginobvhc/Sync/Org/"))
#+end_src
* shells
Settings for the various shells and terminal emulators within Emacs.

- ‘shell-file-name’ – sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.
- ‘eshell-aliases-file’ – sets an aliases file for the eshell.

#+begin_src emacs-lisp

(setq shell-file-name "/bin/zsh"
      eshell-aliases-file "~/.doom.d/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh")
      vterm-max-scrollback 5000)
(map! :leader
      :desc "Counsel eshell history"
      "e h" #'counsel-esh-history)

#+end_src

#+RESULTS:
: counsel-esh-history

* Default APP
** Browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic)
(setq browse-url-generic-program "qutebrowser")
#+end_src
* Mail N' Feed
** Mu4e
#+begin_src emacs-lisp

(require 'mu4e)
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
;;(require 'smtpmail)
(setq user-mail-address "ftodeschini@gmail.com"
      user-full-name  "Fabricio Todeschini"
      ;; I have my mbsyncrc in a different folder on my system, to keep it separate from the
      ;; mbsyncrc available publicly in my dotfiles. You MUST edit the following line.
      ;; Be sure that the following command is: "mbsync -c ~/.config/mu4e/mbsyncrc -a"
      ;;mu4e-get-mail-command "mbsync -c ~/.config/mu4e-dt/mbsyncrc -a"
      mu4e-get-mail-command "mbsync -a"
      mu4e-update-interval  300
      mu4e-main-buffer-hide-personal-addresses t


      message-send-mail-function 'message-send-mail-with-sendmail
      sendmail-program "/usr/bin/msmtp"

      mu4e-sent-folder "/ginobvhc/Sent"
      mu4e-drafts-folder "/ginobvhc/Drafts"
      mu4e-trash-folder "/ginobvhc/Trash"
      mu4e-maildir-shortcuts
      '(("/ginobvhc/Inbox"      . ?i)
        ("/ginobvhc/Sent Items" . ?s)
        ("/ginobvhc/Drafts"     . ?d)
        ("/ginobvhc/Trash"      . ?t)))

;; Download dir


(setq mu4e-attachment-dir  "~/Downloads")


;; ~/.doom.d/config.el

;; (require 'mu4e)

;; ;; use mu4e for e-mail in emacs
;; (setq mail-user-agent 'mu4e-user-agent)
;; (setq mu4e-maildir "/home/ginobvhc/.mail")
;; ;; allow for updating mail using 'U' in the main view:
;; (setq mu4e-get-mail-command "mbsync -Va")

;; (require 'org-mu4e)
;; (setq org-mu4e-convert-to-html t)


;; (setq message-send-mail-function 'message-send-mail-with-sendmail)
;; (setq sendmail-program "/usr/bin/msmtp")
;; ;; tell msmtp to choose the SMTP server by the 'from' field in the outgoing email
;; (setq message-sendmail-extra-arguments '("--read-envelope-from"))
;; (setq message-sendmail-f-is-evil 't)

;; ;; this seems to fix the babel file saving thing
;; (defun org~mu4e-mime-replace-images (str current-file)
;;   "Replace images in html files with cid links."
;;   (let (html-images)
;;     (cons
;;      (replace-regexp-in-string ;; replace images in html
;;       "src=\"\\([^\"]+\\)\""
;;       (lambda (text)
;;         (format
;;          "src=\"./:%s\""
;;          (let* ((url (and (string-match "src=\"\\([^\"]+\\)\"" text)
;;                           (match-string 1 text)))
;;                 (path (expand-file-name
;;                        url (file-name-directory current-file)))
;;                 (ext (file-name-extension path))
;;                 (id (replace-regexp-in-string "[\/\\\\]" "_" path)))
;;            (add-to-list 'html-images
;;                         (org~mu4e-mime-file (concat "image/" ext) path id))
;;            id)))
;;       str)
;;      html-images)))




;; Filtros
;;
;; (add-to-list 'mu4e-bookmarks
;;              '( :name  "Big messages"
;;                 :query "size:5M..500M"
;;                 :key   ?b))

;; (add-to-list 'mu4e-bookmarks
;;   '( :name "Last Year"
;;      :query "date:1y..now"
;;      :key ?y))


;; (add-to-list 'mu4e-bookmarks
;;   '( :name "Unread"
;;      :query "flag:unread"
;;      :key ?u)
;;   )

;;  ACA van los shortcuts
(setq mu4e-maildir-shortcuts
      '(("/ginobvhc/Inbox" . ?g)
        ("/ftodeschini/Inbox" . ?f)))
#+end_src

** RSS
RSS reader
#+begin_src emacs-lisp
(custom-set-variables
 '(elfeed-feeds
   (quote
    (("https://www.reddit.com/r/linux.rss" reddit linux)
     ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
     ("https://hackaday.com/blog/feed/" hackaday linux)
     ("https://opensource.com/feed" opensource linux)
     ("https://linux.softpedia.com/backend.xml" softpedia linux)
     ("https://itsfoss.com/feed/" itsfoss linux)
     ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
     ("https://www.phoronix.com/rss.php" phoronix linux)
     ("http://feeds.feedburner.com/d0od" omgubuntu linux)
     ("https://www.computerworld.com/index.rss" computerworld linux)
     ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
     ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
     ("https://betanews.com/feed" betanews linux)
     ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
     ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))
#+end_src

* Autocomplete
#+begin_src emacs-lisp
(setq company-idle-delay 0.2
      company-minimum-prefix-length 3)
#+end_src
#+begin_src emacs-lisp
(after! company
  (setq company-minimum-prefix-length 2
        company-idle-delay 0.1))

#+end_src
* lsp
#+begin_src emacs-lisp
(after! lsp-ui
  (setq lsp-ui-sideline-enable nil
        lsp-ui-doc-include-signature t
        lsp-ui-doc-max-height 15
        lsp-ui-doc-max-width 100
        lsp-ui-doc-position 'at-point))

#+end_src

Para go tengo que instalar segun el link
[[https://stackoverflow.com/questions/61998389/full-ide-features-support-for-golang-in-doom-emacs][Solucion gopls]]

* Projectile
Setting projects folders

To open project SPC p p
To open treemacs SPC o p
|                           |   | Command |
|---------------------------+---+---------|
| Open Projectile           |   | SPC p p |
| Open treemacs             |   | SPC o p |
| Open Shell                |   | SPC o e |
| Open small Shell          |   | SPC o E |
| Open Recent               |   | SPC f r |
| Open Recent viseted files |   | SPC f R |


#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Sync/proyectos/programacion/01-projects/" "~/Sync/Org/"))
#+end_src

* Patches
#+begin_src emacs-lisp
;; Patch up the evil-org key map, so that org is usable with daemon
;; https://github.com/hlissner/doom-emacs/issues/1897
(after! evil-org
  (evil-define-key '(normal visual) evil-org-mode-map
    (kbd "TAB") 'org-cycle))
#+end_src
